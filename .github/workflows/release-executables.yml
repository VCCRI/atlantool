name: Release executables

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-jar-job:
    name: Build JAR file

    runs-on: ubuntu-latest

    steps:
      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build project
        run: mvn -B clean verify

      - name: Publish JAR to artifacts
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'atlantool.jar'
          path: ./bam-cmd/target/atlantool.jar

      - name: Publish reflection config to artifacts
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'reflect-config.json'
          path: ./bam-cmd/target/classes/META-INF/native-image/picocli-generated/reflect-config.json

      - name: Compute variables
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ steps.vars.outputs.sha_short }}
          release_name: Release ${{ steps.vars.outputs.sha_short }}
          draft: false
          prerelease: false

      - name: Upload JAR file
        id: upload-jar-file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./bam-cmd/target/atlantool.jar
          asset_name: atlantool.jar
          asset_content_type: application/jar

      - name: Write Upload URL To File
        run: |
          echo "${{steps.create_release.outputs.upload_url}}" > upload_url.txt

      - name: Publish Upload URL
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'upload_url.txt'
          path: 'upload_url.txt'

  build-linux-and-macos-images:
    name: Build native image
    needs: [ build-jar-job ]
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
          - os: 'macos-latest'
            label: 'mac'
    runs-on: ${{matrix.os}}

    steps:
      - name: Setup GraalVM
        uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 20.1.0
          native-image: true

      - name: Get JAR Artifact
        uses: actions/download-artifact@v2-preview
        with:
          name: 'atlantool.jar'

      - name: Get reflection config artifact
        uses: actions/download-artifact@v2-preview
        with:
          name: 'reflect-config.json'

      - name: Build native image
        id: build-native-image
        run: |
          native-image -jar atlantool.jar

      - name: Get Release URL artifact
        uses: actions/download-artifact@v2-preview
        with:
          name: 'upload_url.txt'

      - name: 'Get Upload URL'
        run: |
          echo "::set-env name=UPLOAD_URL::$(cat upload_url.txt)"

      - name: Upload native image
        id: upload-native-image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{env.UPLOAD_URL}}
          asset_path: ./atlantool
          asset_name: atlantool-${{ matrix.os }}
          asset_content_type: application/octet-stream
